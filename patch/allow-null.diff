diff --git a/Zend/zend_API.c b/Zend/zend_API.c
index 3ef291c31559..96b9dcb451c4 100644
--- a/Zend/zend_API.c
+++ b/Zend/zend_API.c
@@ -646,10 +646,10 @@ ZEND_API bool ZEND_FASTCALL zend_parse_arg_number_slow(zval *arg, zval **dest, u
 }
 /* }}} */
 
-ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_weak(zval *arg, zend_string **dest, uint32_t arg_num) /* {{{ */
+ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_weak(zval *arg, zend_string **dest, uint32_t arg_num, bool allow_null) /* {{{ */
 {
 	if (EXPECTED(Z_TYPE_P(arg) < IS_STRING)) {
-		if (UNEXPECTED(Z_TYPE_P(arg) == IS_NULL) && !zend_null_arg_deprecated("string", arg_num)) {
+		if (UNEXPECTED(Z_TYPE_P(arg) == IS_NULL) && !allow_null && !zend_null_arg_deprecated("string", arg_num)) {
 			return 0;
 		}
 		convert_to_string(arg);
@@ -671,12 +671,12 @@ ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_weak(zval *arg, zend_string **des
 }
 /* }}} */
 
-ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_slow(zval *arg, zend_string **dest, uint32_t arg_num) /* {{{ */
+ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_slow(zval *arg, zend_string **dest, uint32_t arg_num, bool allow_null) /* {{{ */
 {
 	if (UNEXPECTED(ZEND_ARG_USES_STRICT_TYPES())) {
 		return 0;
 	}
-	return zend_parse_arg_str_weak(arg, dest, arg_num);
+	return zend_parse_arg_str_weak(arg, dest, arg_num, allow_null);
 }
 /* }}} */
 
@@ -688,7 +688,7 @@ ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_or_long_slow(zval *arg, zend_stri
 	if (zend_parse_arg_long_weak(arg, dest_long, arg_num)) {
 		*dest_str = NULL;
 		return 1;
-	} else if (zend_parse_arg_str_weak(arg, dest_str, arg_num)) {
+	} else if (zend_parse_arg_str_weak(arg, dest_str, arg_num, 0)) {
 		*dest_long = 0;
 		return 1;
 	} else {
@@ -803,7 +803,7 @@ static const char *zend_parse_arg_impl(zval *arg, va_list *va, const char **spec
 		case 'S':
 			{
 				zend_string **str = va_arg(*va, zend_string **);
-				if (!zend_parse_arg_str(arg, str, check_null, arg_num)) {
+				if (!zend_parse_arg_str(arg, str, check_null, 0, arg_num)) {
 					return check_null ? "?string" : "string";
 				}
 			}
diff --git a/Zend/zend_API.h b/Zend/zend_API.h
index ecb6e8296bef..82be146253dd 100644
--- a/Zend/zend_API.h
+++ b/Zend/zend_API.h
@@ -1537,10 +1537,10 @@ ZEND_API ZEND_COLD void zend_argument_value_error(uint32_t arg_num, const char *
 #define Z_PARAM_OBJ_OR_CLASS_NAME_OR_NULL(dest) \
 	Z_PARAM_OBJ_OR_CLASS_NAME_EX(dest, 1);
 
-#define Z_PARAM_OBJ_OR_STR_EX(destination_object, destination_string, allow_null) \
+#define Z_PARAM_OBJ_OR_STR_EX(destination_object, destination_string, check_null) \
 	Z_PARAM_PROLOGUE(0, 0); \
-	if (UNEXPECTED(!zend_parse_arg_obj_or_str(_arg, &destination_object, NULL, &destination_string, allow_null, _i))) { \
-		_expected_type = allow_null ? Z_EXPECTED_OBJECT_OR_STRING_OR_NULL : Z_EXPECTED_OBJECT_OR_STRING; \
+	if (UNEXPECTED(!zend_parse_arg_obj_or_str(_arg, &destination_object, NULL, &destination_string, check_null, _i))) { \
+		_expected_type = check_null ? Z_EXPECTED_OBJECT_OR_STRING_OR_NULL : Z_EXPECTED_OBJECT_OR_STRING; \
 		_error_code = ZPP_ERROR_WRONG_ARG; \
 		break; \
 	}
@@ -1551,15 +1551,15 @@ ZEND_API ZEND_COLD void zend_argument_value_error(uint32_t arg_num, const char *
 #define Z_PARAM_OBJ_OR_STR_OR_NULL(destination_object, destination_string) \
 	Z_PARAM_OBJ_OR_STR_EX(destination_object, destination_string, 1);
 
-#define Z_PARAM_OBJ_OF_CLASS_OR_STR_EX(destination_object, base_ce, destination_string, allow_null) \
+#define Z_PARAM_OBJ_OF_CLASS_OR_STR_EX(destination_object, base_ce, destination_string, check_null) \
 	Z_PARAM_PROLOGUE(0, 0); \
-	if (UNEXPECTED(!zend_parse_arg_obj_or_str(_arg, &destination_object, base_ce, &destination_string, allow_null, _i))) { \
+	if (UNEXPECTED(!zend_parse_arg_obj_or_str(_arg, &destination_object, base_ce, &destination_string, check_null, _i))) { \
 		if (base_ce) { \
 			_error = ZSTR_VAL((base_ce)->name); \
-			_error_code = allow_null ? ZPP_ERROR_WRONG_CLASS_OR_STRING_OR_NULL : ZPP_ERROR_WRONG_CLASS_OR_STRING; \
+			_error_code = check_null ? ZPP_ERROR_WRONG_CLASS_OR_STRING_OR_NULL : ZPP_ERROR_WRONG_CLASS_OR_STRING; \
 			break; \
 		} else { \
-			_expected_type = allow_null ? Z_EXPECTED_OBJECT_OR_STRING_OR_NULL : Z_EXPECTED_OBJECT_OR_STRING; \
+			_expected_type = check_null ? Z_EXPECTED_OBJECT_OR_STRING_OR_NULL : Z_EXPECTED_OBJECT_OR_STRING; \
 			_error_code = ZPP_ERROR_WRONG_ARG; \
 			break; \
 		} \
@@ -1829,19 +1829,22 @@ ZEND_API ZEND_COLD void zend_argument_value_error(uint32_t arg_num, const char *
 	Z_PARAM_STRING_EX(dest, dest_len, 1, 0)
 
 /* old "S" */
-#define Z_PARAM_STR_EX(dest, check_null, deref) \
+#define Z_PARAM_STR_EX(dest, check_null, allow_null, deref) \
 		Z_PARAM_PROLOGUE(deref, 0); \
-		if (UNEXPECTED(!zend_parse_arg_str(_arg, &dest, check_null, _i))) { \
+		if (UNEXPECTED(!zend_parse_arg_str(_arg, &dest, check_null, allow_null, _i))) { \
 			_expected_type = check_null ? Z_EXPECTED_STRING_OR_NULL : Z_EXPECTED_STRING; \
 			_error_code = ZPP_ERROR_WRONG_ARG; \
 			break; \
 		}
 
 #define Z_PARAM_STR(dest) \
-	Z_PARAM_STR_EX(dest, 0, 0)
+	Z_PARAM_STR_EX(dest, 0, 0, 0)
+
+#define Z_PARAM_STR_ALLOW_NULL(dest) \
+	Z_PARAM_STR_EX(dest, 0, 1, 0)
 
 #define Z_PARAM_STR_OR_NULL(dest) \
-	Z_PARAM_STR_EX(dest, 1, 0)
+	Z_PARAM_STR_EX(dest, 1, 0, 0)
 
 /* old "z" */
 #define Z_PARAM_ZVAL_EX2(dest, check_null, deref, separate) \
@@ -1933,8 +1936,8 @@ ZEND_API bool ZEND_FASTCALL zend_parse_arg_long_slow(zval *arg, zend_long *dest,
 ZEND_API bool ZEND_FASTCALL zend_parse_arg_long_weak(zval *arg, zend_long *dest, uint32_t arg_num);
 ZEND_API bool ZEND_FASTCALL zend_parse_arg_double_slow(zval *arg, double *dest, uint32_t arg_num);
 ZEND_API bool ZEND_FASTCALL zend_parse_arg_double_weak(zval *arg, double *dest, uint32_t arg_num);
-ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_slow(zval *arg, zend_string **dest, uint32_t arg_num);
-ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_weak(zval *arg, zend_string **dest, uint32_t arg_num);
+ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_slow(zval *arg, zend_string **dest, uint32_t arg_num, bool allow_null);
+ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_weak(zval *arg, zend_string **dest, uint32_t arg_num, bool allow_null);
 ZEND_API bool ZEND_FASTCALL zend_parse_arg_number_slow(zval *arg, zval **dest, uint32_t arg_num);
 ZEND_API bool ZEND_FASTCALL zend_parse_arg_str_or_long_slow(zval *arg, zend_string **dest_str, zend_long *dest_long, uint32_t arg_num);
 
@@ -2000,14 +2003,14 @@ static zend_always_inline bool zend_parse_arg_number(zval *arg, zval **dest, boo
 	return 1;
 }
 
-static zend_always_inline bool zend_parse_arg_str(zval *arg, zend_string **dest, bool check_null, uint32_t arg_num)
+static zend_always_inline bool zend_parse_arg_str(zval *arg, zend_string **dest, bool check_null, bool allow_null, uint32_t arg_num)
 {
 	if (EXPECTED(Z_TYPE_P(arg) == IS_STRING)) {
 		*dest = Z_STR_P(arg);
 	} else if (check_null && Z_TYPE_P(arg) == IS_NULL) {
 		*dest = NULL;
 	} else {
-		return zend_parse_arg_str_slow(arg, dest, arg_num);
+		return zend_parse_arg_str_slow(arg, dest, arg_num, allow_null);
 	}
 	return 1;
 }
@@ -2016,7 +2019,7 @@ static zend_always_inline bool zend_parse_arg_string(zval *arg, char **dest, siz
 {
 	zend_string *str;
 
-	if (!zend_parse_arg_str(arg, &str, check_null, arg_num)) {
+	if (!zend_parse_arg_str(arg, &str, check_null, 0, arg_num)) {
 		return 0;
 	}
 	if (check_null && UNEXPECTED(!str)) {
@@ -2031,7 +2034,7 @@ static zend_always_inline bool zend_parse_arg_string(zval *arg, char **dest, siz
 
 static zend_always_inline bool zend_parse_arg_path_str(zval *arg, zend_string **dest, bool check_null, uint32_t arg_num)
 {
-	if (!zend_parse_arg_str(arg, dest, check_null, arg_num) ||
+	if (!zend_parse_arg_str(arg, dest, check_null, 0, arg_num) ||
 	    (*dest && UNEXPECTED(CHECK_NULL_PATH(ZSTR_VAL(*dest), ZSTR_LEN(*dest))))) {
 		return 0;
 	}
@@ -2233,7 +2236,7 @@ static zend_always_inline bool zend_parse_arg_array_ht_or_str(
 		*dest_str = NULL;
 	} else {
 		*dest_ht = NULL;
-		return zend_parse_arg_str_slow(arg, dest_str, arg_num);
+		return zend_parse_arg_str_slow(arg, dest_str, arg_num, 0);
 	}
 	return 1;
 }
@@ -2277,7 +2280,7 @@ static zend_always_inline bool zend_parse_arg_obj_or_class_name(
 }
 
 static zend_always_inline bool zend_parse_arg_obj_or_str(
-	zval *arg, zend_object **destination_object, zend_class_entry *base_ce, zend_string **destination_string, bool allow_null, uint32_t arg_num
+	zval *arg, zend_object **destination_object, zend_class_entry *base_ce, zend_string **destination_string, bool check_null, uint32_t arg_num
 ) {
 	if (EXPECTED(Z_TYPE_P(arg) == IS_OBJECT)) {
 		if (!base_ce || EXPECTED(instanceof_function(Z_OBJCE_P(arg), base_ce))) {
@@ -2288,7 +2291,7 @@ static zend_always_inline bool zend_parse_arg_obj_or_str(
 	}
 
 	*destination_object = NULL;
-	return zend_parse_arg_str(arg, destination_string, allow_null, arg_num);
+	return zend_parse_arg_str(arg, destination_string, check_null, 0, arg_num);
 }
 
 END_EXTERN_C()
diff --git a/Zend/zend_execute.c b/Zend/zend_execute.c
index 5b2ce68ffb3b..73b794112891 100644
--- a/Zend/zend_execute.c
+++ b/Zend/zend_execute.c
@@ -731,7 +731,7 @@ static bool zend_verify_weak_scalar_type_hint(uint32_t type_mask, zval *arg)
 		ZVAL_DOUBLE(arg, dval);
 		return 1;
 	}
-	if ((type_mask & MAY_BE_STRING) && zend_parse_arg_str_weak(arg, &str, 0)) {
+	if ((type_mask & MAY_BE_STRING) && zend_parse_arg_str_weak(arg, &str, 0, 0)) {
 		/* on success "arg" is converted to IS_STRING */
 		return 1;
 	}
diff --git a/Zend/zend_vm_def.h b/Zend/zend_vm_def.h
index 5207a09d34de..d9a46e57a07a 100644
--- a/Zend/zend_vm_def.h
+++ b/Zend/zend_vm_def.h
@@ -8445,7 +8445,7 @@ ZEND_VM_COLD_CONST_HANDLER(121, ZEND_STRLEN, CONST|TMPVAR|CV, ANY)
 				}
 
 				ZVAL_COPY(&tmp, value);
-				if (zend_parse_arg_str_weak(&tmp, &str, 1)) {
+				if (zend_parse_arg_str_weak(&tmp, &str, 1, 0)) {
 					ZVAL_LONG(EX_VAR(opline->result.var), ZSTR_LEN(str));
 					zval_ptr_dtor(&tmp);
 					break;
diff --git a/Zend/zend_vm_execute.h b/Zend/zend_vm_execute.h
index cb9654688e91..db7f52cbb0bb 100644
--- a/Zend/zend_vm_execute.h
+++ b/Zend/zend_vm_execute.h
@@ -5485,7 +5485,7 @@ static ZEND_VM_COLD ZEND_OPCODE_HANDLER_RET ZEND_FASTCALL ZEND_STRLEN_SPEC_CONST
 				}
 
 				ZVAL_COPY(&tmp, value);
-				if (zend_parse_arg_str_weak(&tmp, &str, 1)) {
+				if (zend_parse_arg_str_weak(&tmp, &str, 1, 0)) {
 					ZVAL_LONG(EX_VAR(opline->result.var), ZSTR_LEN(str));
 					zval_ptr_dtor(&tmp);
 					break;
@@ -14640,7 +14640,7 @@ static ZEND_OPCODE_HANDLER_RET ZEND_FASTCALL ZEND_STRLEN_SPEC_TMPVAR_HANDLER(ZEN
 				}
 
 				ZVAL_COPY(&tmp, value);
-				if (zend_parse_arg_str_weak(&tmp, &str, 1)) {
+				if (zend_parse_arg_str_weak(&tmp, &str, 1, 0)) {
 					ZVAL_LONG(EX_VAR(opline->result.var), ZSTR_LEN(str));
 					zval_ptr_dtor(&tmp);
 					break;
@@ -39146,7 +39146,7 @@ static ZEND_OPCODE_HANDLER_RET ZEND_FASTCALL ZEND_STRLEN_SPEC_CV_HANDLER(ZEND_OP
 				}
 
 				ZVAL_COPY(&tmp, value);
-				if (zend_parse_arg_str_weak(&tmp, &str, 1)) {
+				if (zend_parse_arg_str_weak(&tmp, &str, 1, 0)) {
 					ZVAL_LONG(EX_VAR(opline->result.var), ZSTR_LEN(str));
 					zval_ptr_dtor(&tmp);
 					break;
